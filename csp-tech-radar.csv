name,ring,quadrant,isNew,description
Semantic Versioning,adopt,techniques,TRUE,"Correctly versioning software that makes sense to everyone using it isn't easy. Using a mature versioning scheme like <a href=""https://semver.org/"">Semantic Versioning</a> helps you version your software service APIs in a way that allows consumers of your service to easily understand the severity of the changes in the new version. It is important to remember that a corresponding git tag of the version should be applied to the commit in the VCS that the versioned artifact was built from."
Pipelines as Code,adopt,techniques,TRUE,Pipelines as code is defining the build and deployment pipeline declaratively through code instead of configuring it in a specific CI/CD tooling.
Pair Programming,adopt,techniques,TRUE,"<a href=""https://en.wikipedia.org/wiki/Pair_programming"">Pair Programming</a> is an Agile software development technique in which two programmers work together at some kind of shared workstation setup. One, the driver, writes code while the other, the observer or navigator, reviews each line of code as it is typed in. The two programmers switch roles frequently. We believe that although this may seem as an inefficient usage of our developers' time, the quality of the code produced leads to less time consuming problems later. Other benefits include improved knowledge and skills sharing and team communication."
Lightweight Architecture Decision Records,adopt,techniques,TRUE,"Much documentation can be replaced with highly readable code and tests. In a world of evolutionary architecture, however, it's important to record certain design decisions for the benefit of future team members as well as for external oversight. Lightweight <a href=""http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"">Architecture Decision Records</a> is a technique for capturing important architectural decisions along with their context and consequences. We recommend storing these details in <a href=""https://github.com/npryce/adr-tools"">source control</a>, instead of a wiki or website, as then they can provide a record that remains in sync with the code itself. For most projects, we see no reason why you wouldn't want to use this technique."
Internal Open Source Products,trial,techniques,TRUE,"To help maintain and govern internal libraries that are shared across teams, the libraries can be treated as products that follow the open source model for governance and contribution."
Long lived branches with Gitflow,hold,techniques,TRUE,"Gitflow is a strict branching pattern for releases using Git. Although not an inherently bad pattern, we often see it misused. If the feature and develop branches are short lived and merged often, you are really using the power of Git, which makes these activities easy. However, a problem we often see is that these become long lived branches, which results in the dreaded merge conflicts many people began using Git to escape. A merge is a merge. Regardless of the source control tool or pattern you use. If you wait more than a day or two to merge, you could hit a big merge conflict. This becomes a real issue if you have a larger team. If you have more than a few people waiting to merge, you can have a serious a bottleneck. Introducing patterns like Gitflow require the discipline to merge often to be successful. So by all means use the pattern, but only if you have the discipline to prevent long lived branches"
Microservices Envy,hold,techniques,TRUE,"Microservices can offer significant advantages to organizations, in terms of improving team autonomy and faster frequency of change. The additional complexity that comes from distributed systems requires an additional level of maturity and investment. We are concerned that some teams are rushing into adopting microservices without understanding the changes to development, test, and operations that are required to do them well. Our general advice remains simple. Avoid microservice envy and start with one or two services before rushing headlong into developing more, to allow your team's time to adjust and understand the right level of granularity."
Testing as a separate team,hold,techniques,TRUE,"Fast feedback is a core tenet of Agile and critical to the success of a project. Using a separate QA team slows down this feedback, creates an ""us and them"" mentality and makes it more difficult to build quality into the software. Testing should be a tightly integrated activity and isn't something the team can outsource. We recommend integrated teams where testers work closely with developers instead of having testing as a separate organization."
Anemic REST,hold,techniques,TRUE,"Failure to properly model the domain as a set of resources. Naively developing services that simply expose static, hierarchical data models via templated URLs result in an anemic REST implementation. In a richly modelled domain, REST should enable more than simple repetitive data fetching. In a fully evolved RESTful architecture, business events and abstract concepts are also modelled as resources, and the implementation should make effective use of hypertext, link relations and media types to maximize decoupling between services"
Spock,adopt,languages & frameworks,FALSE,"A testing and specification framework for Java and Groovy applications. It has been adopted as the standard testing framework for automated unit, functional, integration and SIT tests across the department<br />It can also be used for BDD.<br /><br /><p><strong>Teams: </strong>Wrights, Olympus, Krakatoa, Everest, Rockies, Vestrahorn</p>"
Behave,hold,languages & frameworks,FALSE,"A tool for behavior-driven development (BDD) using tests written in a natural language style, backed up by Python code.<br/>Teams should try to favour BDD tests written with Spock test framework.<br /><br /><p><strong>Teams: </strong>Vesuvius, K2, Rosa</p>"
Cucumber,hold,languages & frameworks,FALSE,"A software tool that supports behavior-driven development (BDD). Central to the Cucumber BDD approach is its ordinary language parser called Gherkin.<br />Teams should try to favour BDD tests written with Spock test framework.<br /><br /><p><strong>Teams: </strong>Gonzales, K2, Rosa, Fuji</p>"
Cypress,hold,languages & frameworks,FALSE,A purely JavaScript-based front-end testing tool.<br />Geb should be preferred instead.<br /><br /><p><strong>Teams: </strong>Gonzales</p>
Gatling,adopt,languages & frameworks,FALSE,"An open-source solution for load testing. Originaly created with a Scala DSL, it has now developed a Java DSL too.<br /><br /><p><strong>Teams: </strong>Wrights, Olympus, Krakatoa, Everest, Rockies, Gonzales, Vestrahorn, K2, Rosa, Fuji</p>"
Geb,adopt,tools,FALSE,"A browser automation solution for scripting, scraping, and general automation, supporting tasks like form filling, navigation, and user simulation. It handles dynamic content, manages cookies, supports authentication, and integrates with various browsers for diverse automation scenarios.  <br /><br /><p><strong>Teams: </strong>Olympus, Rockies, Gonzales, Vestrahorn</p>"
Jest,hold,languages & frameworks,FALSE,A JavaScript testing framework designed to ensure correctness of any JavaScript codebase. <br />Vitest is preferred over Jest due to its performance.<br /><br /><p><strong>Teams: </strong>Gonzales</p>
JUnit,adopt,languages & frameworks,FALSE,"A unit testing open-source framework for the Java. Its latest version is JUnit 5. Teams on versions below this, should consider upgrading to the latest version or converting the tests to Spock tests<br /><br /><p><strong>Teams: </strong>Olympus, Gonzales, Huascar√°n , Annapurna, Fuji, K2, Rosa</p>"
Pact,trial,tools,FALSE,"A code-first tool for contract testing of HTTP and message-based integrations. It ensures provider and consumer services interact as expected by defining and verifying contracts during development, commonly used in microservices architectures to manage service dependencies.<br /><br /><p><strong>Teams: </strong>Olympus, Krakatoa, Everest, Fuji</p>"
PyTest/unittest,adopt,languages & frameworks,FALSE,"PyTest and unittest are Python testing frameworks used to validate software functionality through various types of tests, such as unit tests, integration tests, end-to-end tests, and functional tests. PyTest offers features like test discovery based on naming conventions, fixture management, and parameterized testing, while unittest provides a class-based structure for organizing tests and is included in Python's standard library. Both frameworks support a wide range of testing scenarios; however, PyTest's advanced capabilities make it efficient for rapid test development, while unittest is often preferred in environments requiring built-in tools or stricter adherence to Python's default structures. With Spock gaining prominence in our department for integration, end-to-end, and functional tests, PyTest and unittest are expected to be used primarily for unit testing to maintain a clear division of responsibilities across tools.<br /><br /><p><strong>Teams: </strong>K2, Rosa</p>"
QTP,hold,tools,FALSE,"A software that provides functional and regression test automation for software applications and environments. QTP supports keyword and scripting interfaces and features a graphical user interface. Outdated technology that has a very high maintenance cost. <br /><br /><p><strong>Teams: </strong>Olympus,  Krakatoa</p>"
Vitest,trial,languages & frameworks,FALSE,"A JavaScript testing framework built on Vite, used for running tests in JavaScript projects. It supports modern JavaScript tooling and enables integration with Vite-based workflows.<br />It provides better performance than Jest.<br /><br /><p><strong>Teams: </strong>Olympus, Everest</p>"
Wiremock,adopt,tools,FALSE,"A tool for building mock APIs to simulate HTTP-based services for testing and development purposes. It allows users to create, configure, and manage mock endpoints, enabling testing of client applications without relying on real APIs. WireMock supports request matching, response stubbing, and simulating delays, faults, or various HTTP scenarios. It is commonly used in integration testing, performance testing, and scenarios where real APIs are unavailable or unreliable.<br /><br /><p><strong>Teams: </strong>Olympus, Krakatoa, Everest, Rockies, Gonzales, Vestrahorn, Vesuvius, K2, Rosa, Bianco</p>"
Xunit,adopt,languages & frameworks,FALSE,"A unit testing framework for .NET platforms that supports attribute-based test identification, data-driven testing, and parallel execution. It integrates with development tools and CI/CD pipelines, using constructors and IDisposable for resource management to enhance test clarity and isolation.<br /><br /><p><strong>Teams: </strong>Olympus</p>"
ALM Octane,adopt,platforms,FALSE,"A testing platform for high-velocity Lean and Agile teams. It includes integrated planning, continuous integration, test management, and release management<br /><br /><p><strong>Teams: </strong>Ben More, Matterhorn, Etna, Huascar√°n, Annapurna</p>"
TestRail,adopt,platforms,FALSE,"A web-based test case management tool. It is used by testers, developers and team leaders to manage, track, and organise software testing efforts.<br /><br /><p><strong>Teams: </strong>Wrights, Olympus, Everest, Krakatoa, Vestrahorn, Rockies</p>"
